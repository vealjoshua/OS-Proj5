head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2016.11.28.23.31.57;	author o1-sangha;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef SHARE_H
#define SHARE_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <getopt.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>
#include <signal.h>
#include <error.h>
#include <assert.h>
#include <sys/msg.h>
#include <errno.h>
#include <stdio.h>


#define  NANOSECOND    1000000000 

/*Struct for the clock to increment */
typedef struct Clock
{
	int nanoSec;
	int second;
}systemClock;


/*Message struct */
typedef struct msgStruct
{
	int typ;
	int request;
	int sender;
	pid_t userPid;
	int release; //if user is releasing resources
}REQ;

typedef struct resource
{
	unsigned int numUsing;
}resource;


/*struct to sore resources */
typedef struct resourceControlBlock
{
	int id;
	int instance; //num of resources default 20
	int numAvailable; // each instance's resource not in use
	int shareable; 
}RCB;

typedef struct ProcessControlBlock
{
	pid_t userPid; 
	long long int timeInSys;
	resource resource[20];
	int waiting;
	int valid;
	int usrResource;
}PCB; // Processor control block

/* Linked list for the wating users */
typedef struct waitQueue
{
	int num;
	struct list* next;
}queue;


static unsigned int g_seed;

// Used to seed the generator.           
inline void fast_srand(int seed)
{
    g_seed = seed;
}

// Compute a pseudorandom integer.
// Output value in range [0, 32767]
inline int fast_rand(void) 
{
    g_seed = ((getpid()*rand()%1000000000000)*g_seed+(time(NULL)*rand()%1000000000000));
    return (g_seed>>16)&0x7FFF;
}




#endif@
